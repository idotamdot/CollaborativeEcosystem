**Eco CoLab: Complete Development & Governance Guide**

---

## üåç Purpose

The Eco CoLab platform is a decentralized, community-powered collaboration and resource stewardship system. It matches people to projects, skills to needs, resources to communities, and tracks value using transparent accounting, revenue sharing, and ethical participation standards.

---

## üß© Key Modules

1. **Matching Algorithm & Profiles**
2. **Global Resource Registry (with Map View)**
3. **Project Creation & Role Bidding**
4. **Fair Revenue Sharing System**
5. **Transparent Blockchain Accounting**
6. **Community Business Guidelines & Code of Conduct**
7. **Open Learning & Contribution Records**

---

## üîç Matching Algorithm

Each user creates a profile with:

* Skills
* Passions
* Availability (time blocks or ongoing)
* Preferred roles (organizer, contributor, support)
* Language(s)
* Resource access or needs (tools, land, software, materials)
* Work style preferences
* Learning goals

The algorithm uses weighted filters and opportunity tags to:

* Match people to projects that suit their rhythm and goals
* Suggest ideal team configurations based on complementary traits
* Allow for ‚Äúgrowth match‚Äù roles where someone can learn while contributing

```python
# /services/matchmaker.py

def score_match(user, project):
    score = 0
    if any(skill in project["required_skills"] for skill in user["skills"]):
        score += 10
    if user["availability"] in project["schedule"]:
        score += 5
    if user["preferred_role"] in project["open_roles"]:
        score += 3
    if user["learning_goals"]:
        score += 2
    return score

def find_best_matches(user, all_projects):
    return sorted(all_projects, key=lambda p: score_match(user, p), reverse=True)
```

---

## üó∫Ô∏è Global Resource Map

* Spreadsheet or database of all known resources (public and private)
* Fields include: type, location, status (active/dormant), access method
* Visualized as an interactive map (Mapbox, Leaflet)
* Connected to project proposals so teams can see available tools and local partnerships

---

## üõ†Ô∏è Project Creation & Role Bidding

* Anyone can propose a project
* Must include:

  * Scope & purpose
  * Deliverables
  * Needed roles & hours
  * Revenue model
* Contributors can bid for roles based on their profile and preferred hours/pay
* Teams form via consensus and can include auto-suggested members by the matching engine

---

## ü§ù Revenue Sharing Model (Stewardship Investment System)

* Everyone gets paid equally for their time
* Investors are reimbursed incrementally, receiving a "worker-equivalent" paycheck per round until capital is returned
* After the principal is paid back, the investor receives a share like a worker
* Profit is distributed in equal amounts to all contributors, investors, and organizers

```python
# /services/revenue_share.py

def calculate_share(total_revenue, participants):
    base_share = total_revenue / len(participants)
    return {p["id"]: base_share for p in participants}

def calculate_investor_reimbursement(investor, monthly_revenue, remaining_principal, interest_rate=0.02):
    if remaining_principal <= 0:
        return monthly_revenue  # investor becomes equal participant
    pay = min(monthly_revenue, remaining_principal)
    interest = remaining_principal * interest_rate
    return pay + interest
```

---

## üìä Bookkeeping & Blockchain Integration

* Open source ledger
* Revenue and costs logged by project
* Community viewable dashboards
* Optional blockchain integration for:

  * Token-based task credits
  * Real-time audit trails
  * Transparent investor repayments

---

## üìú Community Business Guidelines

* All participating businesses must:

  * Treat labor with dignity and pay fair, equal wages
  * Avoid exploitative practices or unethical sourcing
  * Refuse animal cruelty or environmental harm
  * Accept accountability via review, feedback, and peer stewardship
* Violations result in removal from the ecosystem and partner networks

---

## üìö Learning & Contribution Records

* Optional learning dashboard for users to:

  * Log tasks completed
  * Get feedback
  * Request mentorship or skill advancement
* Enables trusted reputation building without hierarchy
* AI-assisted feedback summaries available

---

## ‚úÖ Replit Setup Summary

* PostgreSQL for data (users, roles, resources, bids)
* Tailwind for styling
* GitHub connected manually
* Matching algorithm will live in `/services/matchmaker.py`
* Revenue share logic in `/services/revenue_share.py`
* Data models organized in `/models`
* Admin interface in `/admin` route
* Project & pledge system via `/projects` and `/pledge`

## üóÉÔ∏è Initial PostgreSQL Schema (/models/schema.sql)

```sql
-- Users
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT UNIQUE,
    skills TEXT[],
    passions TEXT[],
    availability TEXT,
    preferred_roles TEXT[],
    languages TEXT[],
    resources TEXT[],
    style TEXT,
    learning_goals TEXT[],
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Projects
CREATE TABLE projects (
    id SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT,
    scope TEXT,
    deliverables TEXT[],
    required_skills TEXT[],
    open_roles TEXT[],
    schedule TEXT,
    revenue_model TEXT,
    status TEXT DEFAULT 'open',
    created_by INTEGER REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Bids (Role Applications)
CREATE TABLE bids (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    project_id INTEGER REFERENCES projects(id),
    role_applied TEXT,
    hours_requested INTEGER,
    status TEXT DEFAULT 'pending'
);

-- Contributions / Time Logs
CREATE TABLE contributions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    project_id INTEGER REFERENCES projects(id),
    hours_worked NUMERIC,
    date_worked DATE,
    notes TEXT
);

-- Investors
CREATE TABLE investors (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    project_id INTEGER REFERENCES projects(id),
    amount NUMERIC,
    reimbursed NUMERIC DEFAULT 0,
    last_payment_date DATE
);

-- Resources (map-linked)
CREATE TABLE resources (
    id SERIAL PRIMARY KEY,
    type TEXT,
    description TEXT,
    location GEOGRAPHY,
    status TEXT DEFAULT 'active',
    access_method TEXT
);
```

## üö¶ Route Logic for /projects and /pledge

```python
# /routes/projects.py
from flask import Blueprint, request, jsonify
from db import db

projects_bp = Blueprint("projects", __name__)

@projects_bp.route("/projects", methods=["GET"])
def list_projects():
    cur = db.cursor()
    cur.execute("SELECT * FROM projects WHERE status = 'open'")
    projects = cur.fetchall()
    return jsonify(projects)

@projects_bp.route("/projects", methods=["POST"])
def create_project():
    data = request.get_json()
    cur = db.cursor()
    cur.execute("""
        INSERT INTO projects (title, description, scope, deliverables, required_skills, open_roles, schedule, revenue_model, created_by)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        RETURNING id
    """, (
        data["title"], data["description"], data["scope"], data["deliverables"],
        data["required_skills"], data["open_roles"], data["schedule"], data["revenue_model"], data["created_by"]
    ))
    db.commit()
    return jsonify({"project_id": cur.fetchone()[0]})
```

```python
# /routes/pledge.py
from flask import Blueprint, request, jsonify
from db import db

pledge_bp = Blueprint("pledge", __name__)

@pledge_bp.route("/pledge", methods=["POST"])
def record_pledge():
    data = request.get_json()
    cur = db.cursor()
    cur.execute("""
        INSERT INTO investors (user_id, project_id, amount)
        VALUES (%s, %s, %s)
        RETURNING id
    """, (
        data["user_id"], data["project_id"], data["amount"]
    ))
    db.commit()
    return jsonify({"pledge_id": cur.fetchone()[0]})
```

## üõ°Ô∏è Admin Dashboard (/admin)

```python
# /routes/admin.py
from flask import Blueprint, request, jsonify
from db import db

admin_bp = Blueprint("admin", __name__)

@admin_bp.route("/admin/overview", methods=["GET"])
def overview():
    cur = db.cursor()
    cur.execute("SELECT COUNT(*) FROM users")
    users = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM projects")
    projects = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM bids")
    bids = cur.fetchone()[0]
    return jsonify({"users": users, "projects": projects, "bids": bids})

@admin_bp.route("/admin/review-bids", methods=["GET"])
def review_bids():
    cur = db.cursor()
    cur.execute("SELECT * FROM bids WHERE status = 'pending'")
    return jsonify(cur.fetchall())

@admin_bp.route("/admin/approve-bid", methods=["POST"])
def approve_bid():
    bid_id = request.get_json()["bid_id"]
    cur = db.cursor()
    cur.execute("UPDATE bids SET status = 'approved' WHERE id = %s", (bid_id,))
    db.commit()
    return jsonify({"status": "approved"})
```

## üë• Contributor Portal (/contributor)

```python
# /routes/contributor.py
from flask import Blueprint, request, jsonify
from db import db

contrib_bp = Blueprint("contributor", __name__)

@contrib_bp.route("/contributor/projects", methods=["GET"])
def view_my_projects():
    user_id = request.args.get("user_id")
    cur = db.cursor()
    cur.execute("""
        SELECT p.* FROM projects p
        JOIN bids b ON b.project_id = p.id
        WHERE b.user_id = %s AND b.status = 'approved'
    """, (user_id,))
    return jsonify(cur.fetchall())

@contrib_bp.route("/contributor/log-time", methods=["POST"])
def log_time():
    data = request.get_json()
    cur = db.cursor()
    cur.execute("""
        INSERT INTO contributions (user_id, project_id, hours_worked, date_worked, notes)
        VALUES (%s, %s, %s, %s, %s)
    """, (
        data["user_id"], data["project_id"], data["hours_worked"], data["date_worked"], data["notes"]
    ))
    db.commit()
    return jsonify({"status": "logged"})
```

## üß† Task Feedback & Learning Module

```python
# /routes/learning.py
from flask import Blueprint, request, jsonify
from db import db

learning_bp = Blueprint("learning", __name__)

@learning_bp.route("/learning/record", methods=["POST"])
def record_learning():
    data = request.get_json()
    cur = db.cursor()
    cur.execute("""
        INSERT INTO contributions (user_id, project_id, hours_worked, date_worked, notes)
        VALUES (%s, %s, %s, %s, %s)
    """, (
        data["user_id"], data["project_id"], data["hours_worked"], data["date_worked"], data["notes"]
    ))
    db.commit()
    return jsonify({"status": "learning_recorded"})

@learning_bp.route("/learning/feedback", methods=["POST"])
def give_feedback():
    data = request.get_json()
    cur = db.cursor()
    cur.execute("""
        INSERT INTO feedback (user_id, project_id, feedback_text, feedback_date)
        VALUES (%s, %s, %s, CURRENT_DATE)
    """, (
        data["user_id"], data["project_id"], data["feedback_text"]
    ))
    db.commit()
    return jsonify({"status": "feedback_received"})
```

```sql
-- Additional table for feedback
CREATE TABLE feedback (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    project_id INTEGER REFERENCES projects(id),
    feedback_text TEXT,
    feedback_date DATE DEFAULT CURRENT_DATE
);
```

## üñ•Ô∏è Frontend UI (Dashboard + Forms)

```html
<!-- /templates/dashboard.html -->
<div class="p-6">
  <h2 class="text-2xl font-bold mb-4">üåø Welcome to Your Contributor Dashboard</h2>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div class="bg-white rounded shadow p-4">
      <h3 class="font-semibold mb-2">üå± Active Projects</h3>
      <ul id="project-list">
        <!-- JS renders assigned projects here -->
      </ul>
    </div>

    <div class="bg-white rounded shadow p-4">
      <h3 class="font-semibold mb-2">üìù Log Time</h3>
      <form id="log-form">
        <input type="hidden" name="user_id" value="{{ user_id }}">
        <label class="block mb-1">Project</label>
        <select name="project_id" class="w-full border mb-2"></select>
        <label class="block mb-1">Hours Worked</label>
        <input type="number" name="hours_worked" class="w-full border mb-2">
        <label class="block mb-1">Date</label>
        <input type="date" name="date_worked" class="w-full border mb-2">
        <label class="block mb-1">Notes</label>
        <textarea name="notes" class="w-full border mb-2"></textarea>
        <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded">Log</button>
      </form>
    </div>
  </div>
</div>
```

```html
<!-- /templates/admin_dashboard.html -->
<div class="p-6">
  <h2 class="text-2xl font-bold mb-4">üõ°Ô∏è Admin Dashboard</h2>

  <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
    <div class="bg-blue-100 p-4 rounded">
      <h4 class="font-semibold">Users</h4>
      <p id="user-count"></p>
    </div>
    <div class="bg-yellow-100 p-4 rounded">
      <h4 class="font-semibold">Projects</h4>
      <p id="project-count"></p>
    </div>
    <div class="bg-red-100 p-4 rounded">
      <h4 class="font-semibold">Pending Bids</h4>
      <p id="bid-count"></p>
    </div>
  </div>

  <div class="mt-6">
    <h3 class="text-lg font-bold mb-2">üßæ Review Bids</h3>
    <ul id="bid-list">
      <!-- Populated by JS -->
    </ul>
  </div>
</div>
```

## ‚öôÔ∏è JavaScript API Integration (AJAX Fetch Calls)

```js
// /static/js/dashboard.js

document.addEventListener('DOMContentLoaded', () => {
  const userId = document.querySelector('[name="user_id"]').value;
  const projectList = document.getElementById('project-list');
  const projectDropdown = document.querySelector('[name="project_id"]');

  fetch(`/contributor/projects?user_id=${userId}`)
    .then(res => res.json())
    .then(projects => {
      projects.forEach(p => {
        const li = document.createElement('li');
        li.textContent = `${p.title} (${p.status})`;
        projectList.appendChild(li);

        const opt = document.createElement('option');
        opt.value = p.id;
        opt.textContent = p.title;
        projectDropdown.appendChild(opt);
      });
    });

  document.getElementById('log-form').addEventListener('submit', e => {
    e.preventDefault();
    const form = e.target;
    const data = Object.fromEntries(new FormData(form));

    fetch('/contributor/log-time', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    }).then(res => res.json()).then(r => {
      alert('Logged successfully!');
      form.reset();
    });
  });
});
```

```js
// /static/js/admin_dashboard.js

document.addEventListener('DOMContentLoaded', () => {
  fetch('/admin/overview')
    .then(res => res.json())
    .then(data => {
      document.getElementById('user-count').textContent = data.users;
      document.getElementById('project-count').textContent = data.projects;
      document.getElementById('bid-count').textContent = data.bids;
    });

  fetch('/admin/review-bids')
    .then(res => res.json())
    .then(bids => {
      const list = document.getElementById('bid-list');
      bids.forEach(b => {
        const li = document.createElement('li');
        li.textContent = `Bid ${b.id}: ${b.role_applied} (${b.hours_requested} hrs)`;
        const btn = document.createElement('button');
        btn.textContent = '‚úÖ Approve';
        btn.className = 'ml-4 px-2 py-1 bg-green-500 text-white rounded';
        btn.onclick = () => approveBid(b.id);
        li.appendChild(btn);
        list.appendChild(li);
      });
    });

  function approveBid(bidId) {
    fetch('/admin/approve-bid', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ bid_id: bidId })
    }).then(() => {
      alert('Bid approved!');
      location.reload();
    });
  }
});
```

‚úÖ JS bindings now added. Ready to deploy to Replit!
